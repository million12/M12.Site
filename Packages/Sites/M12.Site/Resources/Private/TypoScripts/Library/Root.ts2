namespace: TypoScript=TYPO3.TypoScript

include: Prototypes/Page.ts2

/**
 * Root TypoScript template for the M12.io Site
 */
page = Page {
	@override.template = 'resource://M12.Site/Private/Templates/Page/Default.html'
	@override.isDEV = ${Configuration.setting('TYPO3.Flow.core.context') == 'Development'}

	# Are there any elements with activated magellan sticky nav?
	# This variable is later on used on navigation components (TopBar, SubNav etc) to render
	# appropriate markup.
	#@override.magellanSupport = ${q(node).children('main').children('[activateMagellan=true]').count()}
	@override.magellanSupport = ${true}

	head {
		titleTag.content = ${q(node).property('title') + ' - ' + q(site).property('title')}
		
		metadata = TypoScript:Template {
			templatePath = ${template}
			sectionName = 'metadata'
			@position = 'start'
		}

		javascripts = TypoScript:Template {
			templatePath = ${template}
			sectionName = 'javascripts'
			isDEV = ${isDEV}
		}

		stylesheets = TypoScript:Template {
			templatePath = ${template}
			sectionName = 'stylesheets'
		}
	}

	body {
		templatePath = ${template}
		sectionName = 'body'
		isDEV = ${isDEV}

		layout          = ${q(node).property('layout')}
		isLandingPage   = ${this.layout == 'landingPage' ? true : false}
		isBlogPage      = ${q(node).is('[instanceof M12.Blog:Post]') ? true : false}
		hasGridWrapper  = ${this.isLandingPage ? false : true}
		hasTeaser       = ${q(node).is('[instanceof TYPO3.Neos.NodeTypes:PageTeaser]') ? true : false}
		hasSidebar      = ${q(node).is('[instanceof TYPO3.Neos.NodeTypes:PageSidebar]') ? true: false }

		parts {
			menu = M12.Foundation:TopBar {
				entryLevel = 1
				maximumLevels = 3
				magellanSupport = true
				sectionAlign = 'right'
				# Sticky have to be OFF when magellan is ON
#				extraAttributes.class.sticky = 'sticky'
			}
		}

		// Content areas: you can define as many as you want, just name them and the nodePath.
		content {
			teaser = ContentCollection {
				nodePath = 'teaser'
				@cache.entryIdentifier.documentNode = ${documentNode}
			}
			main = PrimaryContent {
				nodePath = 'main'
			}
			sidebar = ContentCollection {
				# Collect all sidebar children from current and parent pages, so in case sidebar
				# is empty for current page, we render the 1st available sidebar from parent page(s).
				sidebarNode = ${q(node).add(q(node).parents().get()).has('sidebar[_numberOfChildNodes != 0]').get(0)}
				nodePath = ${this.sidebarNode ? q(this.sidebarNode).property('_path') + '/sidebar' : 'sidebar'}
				@cache.entryIdentifier.documentNode = ${documentNode}
			}
		}

		javascripts.site = TypoScript:Template {
			templatePath = ${template}
			sectionName = 'bodyScripts'
		}
	}
}

landingPage < page {
	head.titleTag.content = ${q(node).property('title')}
}

default < page
